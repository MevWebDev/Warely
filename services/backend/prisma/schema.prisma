generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Entities
model Warehouse {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  code        String   @unique @db.VarChar(10) // WHX001
  location    String?  @db.VarChar(500)
  address     String?  @db.Text
  isActive    Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  users       WarehouseUser[]
  products    Product[]
  categories  Category[]
  suppliers   Supplier[]
  orders      Order[]
  locations   Location[]

  reports         Report[]
  kpis            KPI[]
  analyticsEvents AnalyticsEvent[]

  @@map("warehouses")
}

model User {
  id             Int      @id @default(autoincrement())
  auth0Id        String   @unique
  email          String   @unique @db.VarChar(255)
  name           String   @db.VarChar(255)
  profilePicture String?  @db.VarChar(500)
  isActive       Boolean  @default(true)
  // REMOVED: role field (now handled by WarehouseUser)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  stockMovements    StockMovement[]
  warehouseAccess   WarehouseUser[]
  ordersCreated     Order[]
  pickListsAssigned PickList[] @relation("AssignedPicker")

  reports         Report[]
  analyticsEvents AnalyticsEvent[]
  
  @@map("users")
}

model WarehouseUser {
  id          Int           @id @default(autoincrement())
  userId      Int
  warehouseId Int
  role        WarehouseRole @default(WORKER)
  isActive    Boolean       @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  warehouse Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, warehouseId])
  @@map("warehouse_users")
}

// Physical Structure
model Location {
  id               Int      @id @default(autoincrement())
  code             String   @db.VarChar(20)
  name             String?  @db.VarChar(100)
  type             LocationType @default(STORAGE)
  zone             String?  @db.VarChar(50)
  aisle            String?  @db.VarChar(10)
  shelf            String?  @db.VarChar(10)
  bin              String?  @db.VarChar(10)
  capacity         Int?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  warehouse        Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId      Int
  productLocations ProductLocation[]
  
  // ✅ Add these relation fields for stock movements
  stockMovementsFrom StockMovement[] @relation("StockMovementFrom")
  stockMovementsTo   StockMovement[] @relation("StockMovementTo")

  analyticsEvents AnalyticsEvent[]

  @@unique([warehouseId, code])
  @@map("locations")
}

// Product Management
model Category {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.Text
  warehouseId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
  // Relations
  products Product[]
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  analyticsEvents AnalyticsEvent[]
  
  @@unique([name,warehouseId])
  @@map("categories")
}

model Supplier {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(255)
  contactEmail String?  @db.VarChar(255)
  contactPhone String?  @db.VarChar(50)
  address      String?  @db.Text
  website      String?  @db.VarChar(255)
  taxId        String?  @db.VarChar(50)
  isActive     Boolean  @default(true)
  warehouseId  Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  products     Product[]
  orders       Order[]
  warehouse    Warehouse @relation(fields:[warehouseId], references: [id])
  analyticsEvents AnalyticsEvent[]

  @@unique([name, warehouseId])
  @@map("suppliers")
}

model Product {
  id           Int     @id @default(autoincrement())
  sku          String  @db.VarChar(50)
  name         String  @db.VarChar(255)
  description  String? @db.Text
  barCode      String? @db.VarChar(100)
  
  // Pricing
  unitPrice    Decimal @db.Decimal(10, 2)
  unitCost     Decimal @db.Decimal(10, 2)
  
  // Inventory
  currentStock Int     @default(0)
  reservedStock Int    @default(0) // Stock allocated but not shipped
  reorderPoint Int     @default(10)
  maxStock     Int     @default(1000)
  minOrderQty  Int     @default(1)

  // Physical properties
  brand        String? @db.VarChar(100)
  weight       Decimal? @db.Decimal(8, 3) // in kg
  dimensions   String? @db.VarChar(100)   // "L×W×H cm"
  imageUrl     String? @db.VarChar(500)
  isActive     Boolean @default(true)
  
  // Foreign keys
  categoryId  Int
  supplierId  Int?
  warehouseId Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  category         Category          @relation(fields: [categoryId], references: [id])
  supplier         Supplier?         @relation(fields: [supplierId], references: [id])
  warehouse        Warehouse         @relation(fields: [warehouseId], references: [id])
  stockMovements   StockMovement[]
  orderItems       OrderItem[]
  productLocations ProductLocation[]
  pickItems        PickItem[]
  analyticsEvents AnalyticsEvent[]
  
  @@unique([sku, warehouseId])
  @@map("products")
}

model ProductLocation {
  id          Int @id @default(autoincrement())
  productId   Int
  locationId  Int
  quantity    Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  product  Product  @relation(fields: [productId], references: [id])
  location Location @relation(fields: [locationId], references: [id])
  
  @@unique([productId, locationId])
  @@map("product_locations")
}

// Order Management
model Order {
  id          Int         @id @default(autoincrement())
  orderNumber String      @unique @db.VarChar(100)
  type        OrderType
  status      OrderStatus @default(PENDING)
  priority    Priority    @default(NORMAL)

  // Customer/Vendor info
  customerName    String? @db.VarChar(255)
  customerEmail   String? @db.VarChar(255)
  customerPhone   String? @db.VarChar(50)
  shippingAddress String? @db.Text
  billingAddress  String? @db.Text

  // Amounts
  subtotal    Decimal @default(0) @db.Decimal(10, 2)
  taxAmount   Decimal @default(0) @db.Decimal(10, 2)
  totalAmount Decimal @default(0) @db.Decimal(10, 2)

  // Dates
  orderDate     DateTime  @default(now())
  expectedDate  DateTime?
  completedDate DateTime?
  
  notes String? @db.Text

  // Relations
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById Int
  supplier    Supplier? @relation(fields: [supplierId], references: [id])
  supplierId  Int?
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId Int
  
  orderItems  OrderItem[]
  pickLists   PickList[]
 
  analyticsEvents AnalyticsEvent[]

  @@map("orders")
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  quantity   Int
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)

  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@map("order_items")
}

// Picking Process
model PickList {
  id         Int        @id @default(autoincrement())
  listNumber String     @unique @db.VarChar(50)
  status     PickStatus @default(PENDING)
  priority   Priority   @default(NORMAL)
  
  orderId      Int
  order        Order @relation(fields: [orderId], references: [id])
  assignedTo   Int?
  assignedUser User? @relation("AssignedPicker", fields: [assignedTo], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  items PickItem[]
  
  @@map("pick_lists")
}

model PickItem {
  id               Int @id @default(autoincrement())
  quantityRequired Int
  quantityPicked   Int @default(0)
  
  pickListId Int
  pickList   PickList @relation(fields: [pickListId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  
  @@map("pick_items")
}

// Stock Movement Tracking
model StockMovement {
  id            Int               @id @default(autoincrement())
  movementType  MovementType
  quantity      Int
  fromLocationId Int?
  toLocationId   Int?
  notes         String?           @db.Text
  referenceType String?           @db.VarChar(50)
  referenceId   Int?
  createdAt     DateTime          @default(now())

  // Relations
  product      Product   @relation(fields: [productId], references: [id])
  productId    Int
  createdBy    User      @relation(fields: [createdById], references: [id])
  createdById  Int
  
  // ✅ Add these relation fields
  fromLocation Location? @relation("StockMovementFrom", fields: [fromLocationId], references: [id])
  toLocation   Location? @relation("StockMovementTo", fields: [toLocationId], references: [id])

  @@map("stock_movements")
}

// Add to your existing schema.prisma

// Reports and Analytics
model Report {
  id            Int          @id @default(autoincrement())
  type          ReportType
  title         String       @db.VarChar(255)
  description   String?      @db.Text
  parameters    Json?        // Report configuration parameters
  status        ReportStatus @default(PENDING)
  filePath      String?      @db.VarChar(500)
  fileUrl       String?      @db.VarChar(500)
  generatedAt   DateTime?
  scheduledFor  DateTime?
  isScheduled   Boolean      @default(false)
  frequency     ReportFrequency?
  lastRun       DateTime?
  nextRun       DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  warehouse     Warehouse    @relation(fields: [warehouseId], references: [id])
  warehouseId   Int
  createdBy     User         @relation(fields: [createdById], references: [id])
  createdById   Int

  @@map("reports")
}

model KPI {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(100)
  category     String   @db.VarChar(50)
  value        Float
  target       Float?
  unit         String?  @db.VarChar(20)
  period       String   @db.VarChar(20) // daily, weekly, monthly, yearly
  date         DateTime
  metadata     Json?
  createdAt    DateTime @default(now())

  // Relations
  warehouse    Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId  Int

  @@unique([warehouseId, name, category, period, date])
  @@map("kpis")
}

model AnalyticsEvent {
  id           Int      @id @default(autoincrement())
  eventType    String   @db.VarChar(100)
  eventName    String   @db.VarChar(100)
  description  String?  @db.Text
  data         Json?
  value        Float?
  userId       Int?
  productId    Int?
  orderId      Int?
  supplierId   Int?
  categoryId   Int?
  locationId   Int?
  timestamp    DateTime @default(now())

  // Relations
  warehouse    Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId  Int
  user         User?     @relation(fields: [userId], references: [id])
  product      Product?  @relation(fields: [productId], references: [id])
  order        Order?    @relation(fields: [orderId], references: [id])
  supplier     Supplier? @relation(fields: [supplierId], references: [id])
  category     Category? @relation(fields: [categoryId], references: [id])
  location     Location? @relation(fields: [locationId], references: [id])

  @@index([warehouseId, eventType, timestamp])
  @@index([warehouseId, timestamp])
  @@map("analytics_events")
}

// Enums
enum ReportType {
  SALES
  INVENTORY
  ORDERS
  SUPPLIERS
  WAREHOUSE_PERFORMANCE
  PRODUCT_PERFORMANCE
  CUSTOM
}

enum ReportStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
}

enum ReportFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

// Enums
enum WarehouseRole {
  WORKER   // Basic operations
  MANAGER  // Manage orders, reports, users
  OWNER    // Full warehouse control
}

enum OrderType {
  INBOUND  // Purchase orders (receiving stock)
  OUTBOUND // Sales orders (shipping orders)
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PickStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
}

enum ReceivingStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum DeliveryType {
  INCOMING // Suppliers delivering to warehouse
  OUTGOING // Warehouse shipping to customers
}

enum DeliveryStatus {
  SCHEDULED
  IN_TRANSIT
  DELIVERED
  FAILED
  CANCELLED
}

enum LocationType {
  BUILDING // Main structures
  ZONE     // Areas within buildings
  AISLE    // Rows of storage
  SHELF    // Storage shelves
  BIN      // Individual storage bins
  STORAGE  // General storage area
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum MovementType {
  IN         // Stock increase
  OUT        // Stock decrease
  ADJUSTMENT // Manual adjustment
  TRANSFER   // Move between locations
}